def HammingDistance(a, b):
    a = a.lower()
    b = b.lower()
    hd = 0
    for i in range(len(a)):
        if a[i] != b[i]:
            hd += 1
    return(hd)

def DistanceBetweenPatternAndStrings(Pattern, Dna):
    k = len(Pattern)
    distance = 0
    for Text in Dna:
        HammingDis = float('inf')
        for i in range(len(Text)+1-k):
            kmer = Text[i:i+k]
            print(Pattern, kmer)
            hdn = HammingDistance(Pattern, kmer)
            if HammingDis > hdn:
                HammingDis = hdn
        distance = distance + HammingDis
    return distance

# Pattern = 'AAA'
# Dna = ['TTACCTTAAC', 'GATATCTGTC', 'ACGGCGTTCG', 'CCCTAAAGAG', 'CGTCAGAGGT']

Pattern = 'TTTCCAA'
Dna = [
    'GTGCGCCCAGCATGCGTCCTTACGGGTACGGCTGACAACTTTACGGTTTTGCCTATAGTCGCTGAATACGGGACCCTTCTCTCGATGTCCTTGTCGA',
      'TGGCTGAAAATAGTGCTCTGAAATGCTAACGGCAACTAGCACTGGTCAATTCCACCTCTACTTAGCCTCAGCCACCAGTGACAGAACCCATTTTTGG', 
      'TTAGGACAGCTTATACGCGATCCTGTTATTACGGGCACCCGCTACGATTTCCTGAATATACACTCACATTTCGTCGGAACACGAAGTAACCCGGGAT',
        'AGGAACAAGGGTTCAGATGCCGGCCTCGCAAAGTCAGACCTGGAGAGTAGTCGAACAGGTGAGGAGTACCTACGCAGTTGACATCCTAAACTGCAAC',
          'CTCGTATGCGACTCGTGATGCCTTCACCAGTGCTTATCAGTCATGTATTACGCACATCTTACGAGTCACTAAAGATGCTTGAGGTAAATAAACATCG', 
          'ATACCGTGGGTCAGAGGGGTTTCAGTACATAAGAATCCGCTATAGATTCACGACCCGGGATTAATCCATATTATATATAGATCTCAGCGAGAACGGC',
            'TTATGGCATTGCTGTCTGTCAGTACCCATGTACTTGTTCATGGCAAAGGAGATGACTCTAATCGCAGATCCTCCTTATCTCCGCTGCGGTTTCAAGG', 
            'CAAATAATTAGAAAAGTCCCGAATATTAATGATCGTTTATCAAATACGGACAACGGACTAGTAGCAGAACTCATACACGTGCGGCTTCCGGCTAGGT',
              'TAGACGGTCACAGAGACGAGATAATGGGATCTTCAGTTATTGCAATAGCGGCAGATGCCTTCCATTTAACCAAAGGTCATTTTTGTTGTTCGAAAGC',
                'TGATCTAAGTTTAAGCTCTTGTGTGCAAGTGCCATTTACACCTACGCACGTGTTGAGTCATACATATCCCGCTGACCTAGTGATTTGAACTCATCCT',
                  'TGGATCGTGAGAGTTACATCCATTTAATAAGGTCGCTAGGGCAGAACTCGGCATGTCATATCCTTACGACGGCTCATAGCCGGACGTGACAACTATG' ,
                  'CGCCGTTTCGTTGAATGCAAGCTCTATGATCGGACCGACCTAGGCGAGCGGGGTGGACGAGGGTAAAGCACAATACATTTTATCCAAGTGTTTAACC',
                    'AGCGCAGGTTGGTACCCAACTTCCTCTACTGTATGGTCTCCTTCTGTCAGTCTATTGCCTTCGCCCAAAAGAGTACGGGCGAGGAGTAATGATGGTG',
                      'ACTGTCATACGCTACCCCGGGGGCTTTCATATTCACCCCAAATGAAATGTTAATACCCTGCCATCTTGAACCTATAGCCAGGCGGGCCGCTATAGCT',
                        'TCCCTCGGTTGAACTCACGGTATCTAACCTTAAATACGCCAAGGGTGTTAACGCTTACTCTCTTCGGTCAGCGGTATATTATGTTTCGAGCTCGCAC',
                          'AGGATTGCACAGGCATATGCCGTTCGCCCGGTCCTTCAGGCCTGCTAGAATCCTATCGGGCTCTCACGAAGCCTCCTCAATGATTGGATCGATTCTT',
                            'CCGCCAGTTTTCCCCAATCTCTCTGCAACCAGTAAAGGTTGCAACGGAATTAATAAGTAATCAGGTCTTAGCCATATGTGATCGGCGACAGGAACTC',
                              'AGGCACCGCTATTGCTCATAACTGAGTAGCGTATCAGTTGAACAAGCAGCGACCGTCTGACGGGAGACAGTACGGCTAATCTGGTGTGCGTTGCAGG',
                                'ATTAGACTCGCTTGAGCGGCGGCCTCACCTCTCCACGTGTGGTTCGCGATACGCGGAACTCAGTACTGGTGGCCATAGTAAGGTCAGAATATTGACC',
                                  'TCATAAGCCTGATGGGGTCCATTCTGCAGTACTAAGATTGGCTGGCTTACTTGCTCGCACCCTCCCCACTCTAACGGTAGCCTTCAACTTAGCCTTC' ,
                                  'CTATCTGAGACCAACTGGACACAGGACGCATGGTACAAAGCACGTGCCGGAGGTCCGGCCCTCGGGTGGCATAGGGTGAACTTTTGCTAATAAGTGT' ,
                                  'CTGCTGGGAGCGCCGACAGTATAAGGCAGCGGCCAATTGTGCCGTTCTTTGATATTTTACGCGGTAATTTCACCTACGGGAGGCGGGGTATACGAGA' ,
                                  'CGCCTAGTGGTTGCGGACTATGCGTGGTATTTCGAAACAAGGTCGCACGTTCTCTTAGTGAGTGTGGACTGAGACGAAGGAGTTAAATCGCATATAA' ,
                                  'ACTACCCTTGAGACGCAGGTTGCCATGTCCCAAATGAACATCACTTAATGACCGTTCGCGGGTCGTGTCTACTTACGATCTGGCTCCTCGCGGGCAC',
                                    'TGAAAACACGAAGCGATATGCTAGTTTCGGACCGCAGAGGACCAGGTTATCTAATGACGGATTAGTGATGTCTTCTTAACATATGATCACGGTGTAG' ,
                                    'AATGTTTGTCGTCTCGGCGGGGCGAGAGATCTGGCGGAACAGTGCACGCGCGGAGTTACAGTCCCGTTGGCATGCAGTAACCCATCGCTTGCATATC' ,
                                    'GAGATGTTGACCATTCGTTGTATGTGCTTTATTTAGATCATACGGCGCACATTTGCTCCCCAAGAGAGCATAACATTGTAAGGCCCGGAGAGAGCTG' ,
                                    'AACCCCGTTCAGTCCCGTAGCCAAGGGAAACTAAGAGCTACGGGGTCGCACAGATCCACCGTTCGGTCACAGGTACCTCCATTGGGAAGAATAGTTA' ,
                                    'CTCGACGGGTATCGTATATAGTACATCTTGGCACTAATATATCGCCGTTTTGTCGACCAATGTTCAAGCGATCACCATACTGACTCTAAGATACTTA' ,
                                    'CCCCCCAACCGGCTAATACTAGCCCGTAGAGTCTGGAATATGCTTAATTGCCCCCCGACCCTTCCGCCCATGTCTGTATCAGTCGGGCAGCTCACTA',
                                      'GCAAGTAAGCGGCCCCTGAAGTAGAAAAAGCCTGACAAGAATCCATATTAGATGGAGAAGAACCAGGGGCATGTCAACCTCGGAACGTATTCATTAG' ,
                                      'CTCAAGTACGGCCCATGGATGAGGGACAACCCACTAAAAAGTCCGTTCTTTGAATAGATACTCAAGCTACCTTAAAATGAAGCAGGTTATTTTTTCA' ,
                                      'CTTCTTCTTGGAACTTCAAGCACGACTGTCACCGCTCTGAGGCGTAGTCGGGGGTCCTAGGAAAAGGCCACTCTGATGTGTATGAACAATAATGAAT' ,
                                      'TTCACGTAAAAAGTACCGGTCCTGCTCTTTGACTCCTTCTAAATCTGCCCCAAGCGGCTGCCGGGCACACACTATACTAAAACGTTAAGGTTCCGAG' ,
                                      'GAAAGTATTTGCGCACTGAGTTGACCATTAGCTGAATCCATCCTGAGTTTTGCATAGTCCTCGTAAGTCTCGTTAATGCCTATACAACAGCCAACGC' ,
                                      'TGGCCTGTCTTGGCGGGGTAATAGGTGTTATTTCGCTCACTTACAGCACGAATCATTGGGGGTCGCAGGATAATTTTCGAACTGTGACTAATTCTGA',

]

res = DistanceBetweenPatternAndStrings(Pattern, Dna)
print(res)
